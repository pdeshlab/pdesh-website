{"title":"Making maps with the CES","markdown":{"yaml":{"title":"Making maps with the CES","code-block-bg":true,"code-block-border-left":true},"headingText":"What you’ll learn","containsRefs":false,"markdown":"\n\n**Published:** November 29, 2021\n\n\n-   How to use parts of the `urbnmapr` package to make some maps\n\n-   Using `ggplot2` attributes to make your maps more readable\n\n-   When to not use maps (or at least think carefully before doing so)\n\nWhat won’t you learn? There is a lot that goes into maps: projection types (see Dan Kelley’s excellent [writeup](https://cran.r-project.org/web/packages/oce/vignettes/map_projections.html) on the subject), zip code fuzziness, and loading in shapefiles from the Census, just to name a few topics. Cartographers are beings of infinite knowledge and power, and I won’t be able to teach you all of their secrets (I don’t know most of them!). But don’t let that dissuade you! If you’re passionate about maps, this will be a good place for you to start. And if you just need to plot a state-level election outcome map for a class and are panicking, perhaps this tutorial will help you too.\n\nWe’ll also be using the `dataverse` and `survey` packages in this tutorial. I will not explain them in detail here. I have discussed them (and provided additional resources) in my last post: [*Plotting trends over time with the CES*](https://pdeshlab.github.io/tutorial2.html).\n\nMuch of this tutorial uses code that is adapted from an [article](https://www.cgoodman.com/blog/archives/2018/06/16/maps-in-r-using-urbnmapr/) by Christopher Goodman and the Urban Institute’s very own [tutorial](https://urbaninstitute.github.io/r-at-urban/mapping.html#Introduction). When I do this adapting, I note it in-text, but I wanted to give credit up-top too. Thank you for these incredible resources!\n\nAs always, we need to start our code by loading in packages. You’ll need the following to packages execute my code, which you can install with `install.packages(\"name\")`. You’ll then load them in like so:\n\n```{r, message = FALSE, warning = FALSE}\n#### LOAD PACKAGES ####\nlibrary(dataverse) # loading data\nlibrary(urbnmapr)  # geographic information for mapping!\nlibrary(ggplot2)   # pretty plots\nlibrary(geofacet)  # tile plots\nlibrary(scales)    # easy formatting\nlibrary(dplyr)     # data manipulation\nlibrary(survey)    # survey analysis\nlibrary(tidyverse) # the holy grail: more data wrangling\n\nlibrary(leaflet)   # optional: for interactive maps!\nlibrary(here)\n```\n\nThe only exception to this is the `urbnmapr` package, which you need to install from GitHub. This is easy to do! Make sure you have the `devtools` installed as well and run what is below. If you are using a Mac, you may run into some problems loading the `geofacet` package. If this happens, follow this guidance on [Stack Overflow](https://stackoverflow.com/questions/31717850/error-package-or-namespace-load-failed-for-ggplot2-and-for-data-table), but apply it to the packages that did not load correctly. You may need to remove package installations and re-install them. In general, make sure you have the `sf` package installed prior to attempting to re-install `geofacet`.\n\n```{r, eval = FALSE}\nrequire(\"devtools\")\ndevtools::install_github(\"UrbanInstitute/urbnmapr\")\n```\n\n## Getting the data\n\nWe’ll load in the 2020 CES data using the `dataverse` package.\n\n```{r, message = FALSE, warning = FALSE, results = FALSE}\n##### LOADING DATA ####\nces2020_dataverse <- get_dataframe_by_name(\n  filename = \"CES20_Common_OUTPUT_vv.dta\",\n  dataset = \"10.7910/DVN/E9N6PH\",\n  original = TRUE,\n  .f = haven::read_dta,\n  server = \"dataverse.harvard.edu\"\n)\n```\n\nNow before proceeding, we’ll need to decide what questions we want to answer with maps. Picking these questions is important, and not something this tutorial can completely teach you. I’ll include a checklist that I like to use when I have an urge to make a map, but you’ll have to do some thinking on your own, too.\n\nI’m interested in something methodological. The CES—and other surveys like it— often have multiple waves. There are many reasons for doing this. Maybe you want to see how respondents’ opinions will change after an important event (an election? The release of Red (Taylor’s Version)?). Perhaps you want to interview the same respondents again and again (called a panel study). Whatever your reason, you now have one main obstacle: attrition. It’s hard to get people to take surveys. Now getting those same people to take *another* one? It’s a tall task! I want to calculate what percentage of respondents failed to take the CES’ post-election survey in 2020 by state. And I want to map it!\n\nLet’s start by selecting relevant questions. We’ll need some kind of case identifier, the variable of interest, and a geography variable of some kind (to use in mapping). I am most interested in state differences, so I am selecting the inputstate variable.\n\nI do some other data manipulation in the following code to make things run smoothly (made sure state FIPS codes are interpreted correctly, and recoded the tookpost variable). I’ll explain what I’m doing in more detail in the code chunk!\n\n```{r}\n# Let's select variables that we care about!\nces2020_selected <- ces2020_dataverse %>%\n  select(\n    \n    # id for each respondent\n    caseid, \n    \n    # did you take the post-election survey?\n    tookpost, \n    \n    # state respondent is living in.\n    # In this code, I am both selecting\n    # the inputstate column and renaming\n    # it to state_fips rough, all in\n    # one line!\n    state_fips_rough = inputstate) %>%\n  mutate(\n    \n    # tookpost is originally coded so 2 = Yes\n    # and 1 = No. I am recoding it so Yes = 1\n    # and No = 0. Why? When I do calculations, \n    # the average of tookpost will be a proportion\n    # between 0 and 1 that I can represent as a \n    # percent (ex. \"85% of respondents took the\n    # post-election survey\").\n    tookpost_recoded = case_when(\n      tookpost == 1 ~ 0,\n      tookpost == 2 ~ 1,\n    ),\n    \n    # why am I changing state_fips_rough? Like\n    # most coding, things were breaking which inspired\n    # me to get creative. Try running this chunk without\n    # this line and look at ces2020_selected. See anything\n    # weird? Check before you read on!\n    state_fips = as.character(sprintf(\"%02d\", state_fips_rough))\n    \n    # Okay, now that you've looked, I'll spill the beans. \n    # State FIPS codes are always two digits, like 15, 50, \n    # and 02. R was reading in single digits like 02 as\n    # just 2, which is a problem later on. To fix this\n    # I used the function sprintf to tell R to add\n    # leading zeroes to state_fips_rough until there\n    # were two digits per entry. So a value of 4 would\n    # turn into 04, but 36 would stay 36! I can't spend\n    # more time on this now, but if people are interested\n    # in this kind of data manipulation, I am happy to write\n    # about it!\n  )\n\n```\n\nBefore we move forward, I want to see what sample sizes we’re working with. I can do this with the lovely `dplyr` and using piping.\n\n```{r}\n# hey R, for the following, use ces2020_selected please!\nces2020_selected %>%\n  \n  # whatever calculation I tell you to do, please\n  # do it grouped--- that is, only within entries\n  # with the same state FIPS code.\n  group_by(state_fips) %>%\n  \n  # could you tell me how many entries I have per\n  # state?\n  summarise(n = n())\n```\n\n```{r}\n# you'll notice that the whole table does not print here.\n# To see the entire thing, print it in your R console\n```\n\nInteresting! It’s cool to see how the CES samples across the United States. Because I’m interested in just looking at the CES as is (and not using the CES to make a hypothesis about Americans writ large), I don’t need to do any other steps here. These numbers will be good to keep in mind as we calculate what percentage of respondents took the post-election survey by state. Actually, let’s go ahead and calculate that with `dplyr`!\n\n```{r}\npost_aggregate <- ces2020_selected %>%\n  group_by(state_fips) %>%\n  \n  # give me the mean of tookpost_recoded \n  # for each state, and make that a new\n  # variable called mean_post\n  summarise(mean_post = mean(tookpost_recoded))\n\n# let's take a look!\npost_aggregate\n```\n\nNow it’s time to use the `urbnmapr` package developed by The Urban Institute. Mapping is actually quite complicated! Even though we now have a summary table that tells us what percentage of respondents took the post-election survey for each state, R still needs to be able to draw the map! How will it know what states are shaped like? How boundaries intersect? How will it make the map pretty?\n\nYou try drawing a map of the U.S. from scratch without guidlines. It’s hard! `urbnmapr` helps by letting us pull from its database. Below, I use our state_fips column to pull geographic details from `urbnmapr`. I can do this because `urbnmapr` has a databse with a column named state_fips (almost like I named it the same on purpose!).\n\n```{r}\npost_map <- left_join(post_aggregate, \n                      urbnmapr::states, by = \"state_fips\")\n\npost_map\n```\n\nWhen we print post_map, you’ll notice a lot of information that we didn’t have before. It looks like we have longitude and latitude, some other visual helpers for mapping, as well as helpful state abbreviations! We retain our other data (most importantly— our mean_post stat).\n\nBelieve it or not, it’s now time to map. The code for creating maps can be daunting, and I’ll present a big chunk to you with annotations. You should feel free to try this code with lines removed to see how the map would appear differently!\n\n```{r, message = FALSE}\n# Plotting \n# Code adapted from: \n# https://www.cgoodman.com/blog/archives/2018/06/16/maps-in-r-using-urbnmapr/\n# I also retain some of Chris' annotations here for clarity.\n\nggplot() +\n  \n  # county map\n  geom_polygon(data = post_map,\n               mapping = aes(x = long, y = lat,\n                             group = group,\n                             \n                             # I want the color \n                             # that each state\n                             # has to depend\n                             # on mean_post!\n                             fill = mean_post)) +\n \n   # add state outlines using urbnmapr\n  geom_polygon(data = urbnmapr::states,\n               # when we write urbnmapr::states\n               # we are telling R to specifically\n               # use the urbnmapr package to pull up\n               # states. Some coders like using this notation\n               # consistently ---whenever they use a function\n               # they tell R which package it comes from.\n               # I don't do that, but if your code is\n               # breaking and you don't know why--- try\n               # calling on the package explicitly (sometimes)\n               # packages have functions that are named the\n               # same thing, which confuses R!\n               \n               mapping = aes(long, lat,group = group),\n               fill = NA, color = \"#ffffff\", size = 0.4) +\n  \n  # projection\n  coord_map(projection = \"polyconic\")+\n  \n  # I want to create a scale that goes from low to\n  # high, where the color of the high value connotes\n  # that things are good. In the United States,\n  # the color green is often the \"good\" or \"everything's\n  # fine\" color, so I'll use a version of that.\n  \n  # You can find an R Color Cheat Sheet here by Melanie Frazier: \n  # https://www.nceas.ucsb.edu/sites/default/files/2020-04/colorPaletteCheatsheet.pdf\n  scale_fill_gradient(low = \"white\", \n                      high = \"seagreen4\", \n                      \n                      # I can define limits explicitly if I want.\n                      # If you do this, always check that you are not\n                      # accidentally excluding data! (I made sure all my)\n                      # data fit in this range reasonably.\n                      limits = c(0.75, 0.95), \n                      \n                      # Right now my code is in decimals.\n                      # We can use a trick we learned last tutorial\n                      # to make the labels into integer percentages.\n                      # Try changing the accuracy = 5L argument\n                      # to learn what it does!\n                      labels = percent_format(accuracy = 5L)) + \n  # Theming\n  theme_minimal()+\n  theme(\n    legend.position = \"right\",\n    legend.text.align = 0,\n    legend.title = element_blank(),\n    plot.margin = unit(c(.5,.5,.2,.5), \"cm\")) +\n    theme(\n    axis.line = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n  ) +\n  \n  # some useful titles!\n  labs(x = \"\",\n       y = \"\",\n       title = \"% of Respondents Who Took the Post Election Survey\",\n       caption = \"Author: Pia Deshpande, \\n Data: 2020 Cooperative Election Study\")\n\n```\n\nAnd ta da! A map! It seems like respondents don’t take the post election survey as frequenty in Mississippi, Arkansas, Oklahoma, Alaska, and Texas, among others. On the other hand, New Mexico and New Hampshire seem to be avid survey takers.\n\nThere are some good things about the map, and some bad things.\n\nLet’s start with the bad. All maps take data that is detailed, and represents that data in a less detailed way to be intelligible. I’m not sure exactly what percentage of Texans took the post-election survey, and to find out, I would need to pull up that table we created earlier! The color scale I picked gives me some idea how states are doing compared to each other, but not how they are doing compared to some norm. What if I wanted to see which states were below the CES’ national average? This would not be the plot to use then! Another bad thing is endemic to this type of map — I’ve talked about Texas twice now. Why? Well, it’s big on the map, and my eye wants to pay attention to it. The north east is dwarfed completely, and it makes it hard to see trends there.\n\nOkay, but are there good things? Yes! Using state geography has its benefits. Your readers will likely be familiar with this type of map. They’ll know where to glance for their home state, and will (hopefully) be able to locate others. My color scale progresses from white to green, which gives the effect of states with a lower response rate being kinda transparent. That’s neat! Conceptually, it makes sense that Oklahoma is fading out compared to New Mexico, which took the post-election survey at a much higher rate.\n\nWe shouldn’t just settle for this map as is! Though some problems can’t be solved with maps at all (not being able to see the data exactly) or with chloropleths (state geographies); some can be solved! Let’s make a map that will help me tell the world which states are doing above, below, and around average on taking the post-election survey. I’ll do this by changing the color scale.\n\n```{r}\n# Plotting (Code adapted from https://www.cgoodman.com/blog/archives/2018/06/16/maps-in-r-using-urbnmapr/)\n\nggplot() +\n  # County map\n  geom_polygon(data = post_map,\n               mapping = aes(x = long, y = lat,\n                             group = group,\n                             fill = mean_post)) +\n  # Add state outlines\n  geom_polygon(data = urbnmapr::states,\n               mapping = aes(long, lat,group = group),\n               fill = NA, color = \"#ffffff\", size = 0.4) +\n  # Projection\n  coord_map(projection = \"polyconic\")+\n  \n# scale_fill_gradient 2 helps us create *diverging* color scales!\n# I define red as a low point, white as the middle, and green\n# as the high point. \nscale_fill_gradient2(\n  low = \"red\",\n  mid = \"white\",\n  high = \"seagreen4\",\n  \n  # I define the midpoint explicitly here! \n  # I calculate it not as the mean of all the \n  # state averages, but as the mean of all CES\n  # respondents. That value will be where the\n  # scale is a stark white.\n  midpoint = mean(ces2020_selected$tookpost_recoded),\n  limits = c(0.75, 0.95), \n  labels = percent_format(accuracy = 5L)\n)+\n  # Theming\n  theme_minimal()+\n  theme(\n    legend.position = \"right\",\n    legend.text.align = 0,\n    legend.title = element_blank(),\n    plot.margin = unit(c(.5,.5,.2,.5), \"cm\")) +\n    theme(\n    axis.line = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n  ) + \n  labs(x = \"\",\n       y = \"\",\n       title = \"% of Respondents Who Took the Post Election Survey\",\n       caption = \"Author: Pia Deshpande, \\n Data: 2020 Cooperative Election Study\")\n```\n\nWell this looks different! States that are around average fade into the background (goodbye Oregon!), while outliers are bleeding and verdant. Mississippi really stands out here, and so does New Hampshire!\n\n## What about substantive maps?\n\nOkay, but I need to write a paper by the end of the semester using survey questions to show my teacher how weighting works. How do I make a map for that?\n\nHave no fear! This section will help you. Let’s map what percentage of Americans were contacted by a political campaign in 2020 and how that differs by state.\n\nMaking a substantive map means we need to be using all of our normal data analysis tools. That is, when we calculate summary statistics, we should use survey weights and the `survey` function. It also means being well aware of sample size. For this analysis, if a state has less than 200 observations, I exclude it from my analysis. Since that state will still be on the map, we’ll have to decide how we depict it.\n\nFirst, let’s select relevant variables from `ces2020_dataverse`, just like we did for the first set of maps!\n\n```{r}\n# Let's try making a substantive map: what percentage of respondents were contacted\n# by a political campaign in 2020?\n\n# Let's select variables that we care about!\nces2020_substantive <- ces2020_dataverse %>%\n  select(\n    \n    # id for each respondent\n    caseid, \n    \n    # weight for survey analysis!\n    commonpostweight, \n    \n    # state respondent is registered in\n    state_fips_rough = inputstate_post, \n    \n    # were you contacted by a political campaign in 2020?\n    CC20_431a) %>%\n  \n  mutate(\n    contact = case_when(\n      \n      # I am recoding this so a \"Yes\" is a 1\n      # and a \"No\" is a 0.\n      CC20_431a == 1 ~ 1,\n      CC20_431a == 2 ~ 0\n    ),\n    state_fips = as.character(sprintf(\"%02d\", state_fips_rough))\n  ) %>%\n  \n  # We don't want to include someone if they did not take the post-election survey\n  drop_na(commonpostweight)\n```\n\nJust like last time, we should look at state samples. I’m not comfortable making an inference about a state if less than 200 people were polled there. Let’s find which states we should cull from our analysis.\n\n```{r}\n# Check sample sizes of each state\nsample_cutoff <- ces2020_substantive %>%\n  group_by(state_fips) %>%\n  summarise(n = n()) %>%\n  \n  # only give me states with less than 200 responses\n  filter(n < 200)\n\nsample_cutoff\n```\n\nThis means we are going to have to exclude states with fips code 56, 02, 50, 38, 46, 11, 44, and 15. Looking at the CES guide this is Wyoming, Alaska, Vermont, North Dakota, South Dakota, the District of Columbia (which is not a state right now!), Rhode Island, and Hawaii, respectively. Sad to see them go, but it’s better than making unsound claims!\n\nNow to calculate some statistics. Since I went through the `survey` package in more detail in my previous tutorial, I won’t reiterate myself here.\n\n```{r}\nsurvey <- svydesign(ids = ~0, \n                    data = ces2020_substantive, \n                    weights = ~commonpostweight)\n\ncontact_state <- as.data.frame(svyby(~contact, \n                                     ~state_fips, \n                                     survey, \n                                     svymean, \n                                     na.rm = TRUE)) %>%\n  \n  # I'm telling R to select all state_fips that were not in our\n  # table of states with less than <200 entries!\n  filter(!(state_fips %in% sample_cutoff$state_fips))\n\n# Join with urbnmapr\ncontact_map <- left_join(contact_state, \n                         states, by = \"state_fips\") %>%\n  \n  \n  # Spoiler! This step will let us make a tile map later on. We're specifying the dimensions of the \n  # tile here. I want my tiles to be square, but you can change this as you see fit.\n  mutate(xdimension = 1, \n         ydimension = 1) \n```\n\nNow to plot! Let’s first try to map a standard U.S. state geography with a sequential scale (low to high, with no midpoint to facilitate diverging). There will be less comments this time around!\n\n```{r, warning = FALSE, message = FALSE}\nggplot() +\n  # County map\n  geom_polygon(data = contact_map,\n               mapping = aes(x = long, y = lat,\n                             group = group,\n                             \n                             # our variable of interest!\n                             fill = contact)) +\n  # Add state outlines\n  geom_polygon(data = urbnmapr::states,\n               mapping = aes(long, lat,group = group),\n               \n               # with the color argument, I am giving\n               # states a grey outline!\n               fill = NA, color = \"grey30\", size = 0.4) +\n  # Projection\n  coord_map(projection = \"polyconic\")+\n  \n  # purple seems like a bipartisan color?\n  scale_fill_gradient(low = \"plum\", \n                      high = \"mediumpurple4\", \n                      labels = percent_format(accuracy = 5L),\n                      limits = c(0.35, 0.75),\n                      \n                      # This blank \"\" means I do not want my \n                      # legend to have a title.\n                      \"\") + \n  \n  # Theming\n  theme_minimal()+\n  theme(\n    legend.position = \"right\",\n    legend.text.align = 0,\n    plot.margin = unit(c(.5,.5,.2,.5), \"cm\")) +\n  theme(\n    axis.line = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n  ) + \n  theme(plot.title=element_text(family=\"Open Sans Condensed Bold\", margin=margin(b=15)))+\n  theme(plot.subtitle=element_text(family=\"Open Sans Condensed Light Italic\"))+\n  theme(plot.margin=unit(rep(0.5, 4), \"cm\"))+\n  labs(x = \"\",\n       y = \"\",\n       title = \"% of Respondents Contacted by a Political Campaign in 2020\",\n       caption = \"Author: Pia Deshpande, Data: 2020 Cooperative Election Study\")\n\n```\n\nThere she is! The states that are missing are in stark white (notice how I did not have my scale start with white?). We see some states like Montana with a pretty high campaign contact rate, and soms states like Louisiana with a pretty low one. However, there’s a problem — we used the `survey` package to calculate these values, and they have standard errors. There’s not a good way to represent standard errors in our map as it currently exists!\n\nWhy are we worried about standard errors here? I was suspiciously silent about them with our first map. It’s because our first map was depicting something about CES respondents, which means our sample was *the same* as our population of interest (an incredible and rare thing). But when we analyze substantive questions, we’re usually trying to use the survey as a proxy for how a certain population behaves (in this case, the American public), which means our estimates have uncertainty to them. People who make maps and use them in their analysis are aware of this difficulty, and there are ways to overcome it that I won’t go into in this tutorial— mostly because I am not equipped to teach you something I do not know! Penn State’s Department of Geography has a good [writeup](https://www.e-education.psu.edu/geog486/node/693) on the topic of mapping uncertainty.\n\nBut for our tutorial, there is one problem I might try and solve — state geography. Shy of redrawing all the state lines, I think we should make a tile map. In a tile map, all states are represented by similar sized squares, so readers will weigh them equally as they visually process them.\n\n```{r}\n\n# The following code is adapted from the Urban Institute's Tutorial\n# https://urbaninstitute.github.io/r-at-urban/mapping.html#geom_tile()\n\n# create a custom geofacet grid\n# This was constructed by the Urban Institute! I am using it here.\n# It tells R how to draw the grid, and how to name each square.\n# I am grateful someone else wrote this and not me!\n\nurban_grid <- tibble(\n  row = c(1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, \n          4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, \n          7, 7, 8, 8, 8),\n  col = c(1, 11, 6, 10, 11, 1, 2, 3, 4, 5, 6, 7, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 3, 4, 5, 6, 7, 8, 9, 4, 5, 6, 7, 8, 1, 4, 9),\n  code = c(\"AK\", \"ME\", \"WI\", \"VT\", \"NH\", \"WA\", \"ID\", \"MT\", \"ND\", \"MN\", \"IL\", \"MI\", \"NY\", \"MA\", \"OR\", \"NV\", \"WY\", \"SD\", \"IA\", \"IN\", \"OH\", \"PA\", \"NJ\", \"CT\", \"RI\", \"CA\", \"UT\", \"CO\", \"NE\", \"MO\", \"KY\", \"WV\", \"VA\", \"MD\", \"DE\", \"AZ\", \"NM\", \"KS\", \"AR\", \"TN\", \"NC\", \"SC\", \"DC\", \"OK\", \"LA\", \"MS\", \"AL\", \"GA\", \"HI\", \"TX\", \"FL\"),\n  name = c(\"Alaska\", \"Maine\", \"Wisconsin\", \"Vermont\", \"New Hampshire\", \"Washington\", \"Idaho\", \"Montana\", \"North Dakota\", \"Minnesota\", \"Illinois\", \"Michigan\", \"New York\", \"Massachusetts\", \"Oregon\", \"Nevada\", \"Wyoming\", \"South Dakota\", \"Iowa\", \"Indiana\", \"Ohio\", \"Pennsylvania\", \"New Jersey\", \"Connecticut\", \"Rhode Island\", \"California\", \"Utah\", \"Colorado\", \"Nebraska\", \"Missouri\", \"Kentucky\", \"West Virginia\", \"Virginia\", \"Maryland\", \"Delaware\", \"Arizona\", \"New Mexico\", \"Kansas\", \"Arkansas\", \"Tennessee\", \" North Carolina\", \"South Carolina\", \" District of Columbia\", \"Oklahoma\", \"Louisiana\", \"Mississippi\", \"Alabama\", \"Georgia\", \"Hawaii\", \"Texas\", \"Florida\")\n)\n\n\ncontact_map %>%\n  \n  # remember when I defined xdimension and ydimension a while ago?\n  # It's coming in handy here!\n  ggplot(aes(x = xdimension, y = ydimension, fill = contact)) +\n\n  # We're making a tile map!\n  geom_tile() +\n  \n  # I am defining some display text here. I want\n  # to print the value of \"contact,\" which is the \n  # estimated percentage of Americans in a certain\n  # state who were contacted by a political campaign!\n  \n  # However, this number is a decimal. Another way\n  # of formatting percentages is by multiplying them by 100\n  # and using the round function (I wanted no decimal places).\n  # I then use the paste0 function to add a pretty percentage sign!\n  geom_text(aes(label = paste0(round(contact*100,0), \"%\")),\n            \n            # this makes the text white!\n            color = \"white\") +\n\n  # Using our grid from before. Thanks again to the Urban Institute!\n  # I also want to facet by state_abbv (That is, make a new tile) for\n  # each state abbreviation.\n  facet_geo(facets = ~state_abbv, grid = urban_grid) +\n  labs(title = \"Percentage of Americans Contacted by a Political Campaign in 2020\",\n       subtitle = \"Adapted from Code from the Urban Institute\",\n       caption = \"Graph by Pia Deshpande \\n Data from the 2020 CES\",\n       x = NULL,\n       y = NULL) +\n  scale_fill_gradient(\n    \n  # Purple all the way down!\n  low = \"plum\",\n  high = \"mediumpurple4\",\n  \n  # No legend title please\n  \"\"\n)+\n  theme(plot.background = element_rect(colour = \"white\"),\n        panel.grid = element_blank(),\n        panel.grid.major = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        axis.line = element_blank(),\n        panel.spacing = unit(0L, \"pt\"),\n        legend.position = \"none\",\n        strip.text.x = element_text(size = 9L))\n\n```\n\nOkay! We have it! A graph-table-color thing! An abomination of nature that does fix some of our problems, but adds new ones. Readers are no longer going to see Texas as more important than Connecticut because of state size, and they can now look at the exact percentage. Data we excluded is also easy to spot! However, because this chart provides more information, it asks viewers to spend more time looking at it. This is a complicated figure—and you could argue that the color fill behind the text label doesn’t do much.\n\nAll maps are trade offs. In fact, even using a map is a pretty important choice! How should you decide?\n\n## Okay, when should I use a map?\n\n-   I am genuinely interested in answering a *geographic* question, and a map would help.\n\n-   I have thought carefully about the geography I am using and whether it is appropriate. (For example, if you are interested in studying different levels of property tax, the state geography will be too broad for you. Most property taxes are decided at the local level).\n\n-   I have thought about the trade offs of using maps and selected the best type of map. Tile maps are great when you don’t want the size of states, countries, or territories to make readers weigh larger geographic regions more importantly than small ones. On the other hand, state geography is recognizable, and can help people interpret your results. You have to make some important choices!\n\n-   I have thought about mapping uncertainty and am either comfortable with not doing it (see our first slew of maps) or have determined how I will signal uncertainty to readers.\n\nThat brings us to the end of our tutorial. As always, the whole script is below (slightly rearranged so it will hopefully run smoothly on your computer).\n\n## The whole script\n\n```{r, eval = FALSE}\nknitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE)\n# Setting up my RmD file\n\nlibrary(knitr)\n# A package for knitting things together!\nlibrary(htmlwidgets)\n# A package to save leaflet HTML so we can render these maps in Jekyll. If you are just looking at your maps on your local PC, you won't need to do this.\n# A special thanks to Rob Williams for his tutorial on how to do this: https://jayrobwilliams.com/posts/2020/09/jekyll-html\n\n#### LOAD PACKAGES ####\nlibrary(dataverse) # loading data\nlibrary(urbnmapr)  # geographic information for mapping!\nlibrary(ggplot2)   # pretty plots\nlibrary(geofacet)  # tile plots\nlibrary(scales)    # easy formatting\nlibrary(dplyr)     # data manipulation\nlibrary(survey)    # survey analysis\nlibrary(tidyverse) # the holy grail: more data wrangling\n\nlibrary(leaflet)   # optional: for interactive maps!\nlibrary(here)\n\nrequire(\"devtools\")\ndevtools::install_github(\"UrbanInstitute/urbnmapr\")\n##### LOADING DATA ####\nces2020_dataverse <- get_dataframe_by_name(\n  filename = \"CES20_Common_OUTPUT_vv.dta\",\n  dataset = \"10.7910/DVN/E9N6PH\",\n  original = TRUE,\n  .f = haven::read_dta,\n  server = \"dataverse.harvard.edu\"\n)\n# Let's select variables that we care about!\nces2020_selected <- ces2020_dataverse %>%\n  select(\n    \n    # id for each respondent\n    caseid, \n    \n    # did you take the post-election survey?\n    tookpost, \n    \n    # state respondent is living in.\n    # In this code, I am both selecting\n    # the inputstate column and renaming\n    # it to state_fips rough, all in\n    # one line!\n    state_fips_rough = inputstate) %>%\n  mutate(\n    \n    # tookpost is originally coded so 2 = Yes\n    # and 1 = No. I am recoding it so Yes = 1\n    # and No = 0. Why? When I do calculations, \n    # the average of tookpost will be a proportion\n    # between 0 and 1 that I can represent as a \n    # percent (ex. \"85% of respondents took the\n    # post-election survey\").\n    tookpost_recoded = case_when(\n      tookpost == 1 ~ 0,\n      tookpost == 2 ~ 1,\n    ),\n    \n    # why am I changing state_fips_rough? Like\n    # most coding, things were breaking which inspired\n    # me to get creative. Try running this chunk without\n    # this line and look at ces2020_selected. See anything\n    # weird? Check before you read on!\n    state_fips = as.character(sprintf(\"%02d\", state_fips_rough))\n    \n    # Okay, now that you've looked, I'll spill the beans. \n    # State FIPS codes are always two digits, like 15, 50, \n    # and 02. R was reading in single digits like 02 as\n    # just 2, which is a problem later on. To fix this\n    # I used the function sprintf to tell R to add\n    # leading zeroes to state_fips_rough until there\n    # were two digits per entry. So a value of 4 would\n    # turn into 04, but 36 would stay 36! I can't spend\n    # more time on this now, but if people are interested\n    # in this kind of data manipulation, I am happy to write\n    # about it!\n  )\n\n# hey R, for the following, use ces2020_selected please!\nces2020_selected %>%\n  \n  # whatever calculation I tell you to do, please\n  # do it grouped--- that is, only within entries\n  # with the same state FIPS code.\n  group_by(state_fips) %>%\n  \n  # could you tell me how many entries I have per\n  # state?\n  summarise(n = n())\n\n\n# you'll notice that the whole table does not print here.\n# To see the entire thing, print it in your R console\npost_aggregate <- ces2020_selected %>%\n  group_by(state_fips) %>%\n  \n  # give me the mean of tookpost_recoded \n  # for each state, and make that a new\n  # variable called mean_post\n  summarise(mean_post = mean(tookpost_recoded))\n\n# let's take a look!\npost_aggregate\npost_map <- left_join(post_aggregate, \n                      states, by = \"state_fips\")\n\npost_map\n# Plotting \n# Code adapted from: \n# https://www.cgoodman.com/blog/archives/2018/06/16/maps-in-r-using-urbnmapr/\n# I also retain some of Chris' annotations here for clarity.\n\nggplot() +\n  \n  # county map\n  geom_polygon(data = post_map,\n               mapping = aes(x = long, y = lat,\n                             group = group,\n                             \n                             # I want the color \n                             # that each state\n                             # has to depend\n                             # on mean_post!\n                             fill = mean_post)) +\n \n   # add state outlines using urbnmapr\n  geom_polygon(data = urbnmapr::states,\n               # when we write urbnmapr::states\n               # we are telling R to specifically\n               # use the urbnmapr package to pull up\n               # states. Some coders like using this notation\n               # consistently ---whenever they use a function\n               # they tell R which package it comes from.\n               # I don't do that, but if your code is\n               # breaking and you don't know why--- try\n               # calling on the package explicitly (sometimes)\n               # packages have functions that are named the\n               # same thing, which confuses R!\n               \n               mapping = aes(long, lat,group = group),\n               fill = NA, color = \"#ffffff\", size = 0.4) +\n  \n  # projection\n  coord_map(projection = \"polyconic\")+\n  \n  # I want to create a scale that goes from low to\n  # high, where the color of the high value connotes\n  # that things are good. In the United States,\n  # the color green is often the \"good\" or \"everything's\n  # fine\" color, so I'll use a version of that.\n  \n  # You can find an R Color Cheat Sheet here by Melanie Frazier: \n  # https://www.nceas.ucsb.edu/sites/default/files/2020-04/colorPaletteCheatsheet.pdf\n  scale_fill_gradient(low = \"white\", \n                      high = \"seagreen4\", \n                      \n                      # I can define limits explicitly if I want.\n                      # If you do this, always check that you are not\n                      # accidentally excluding data! (I made sure all my)\n                      # data fit in this range reasonably.\n                      limits = c(0.75, 0.95), \n                      \n                      # Right now my code is in decimals.\n                      # We can use a trick we learned last tutorial\n                      # to make the labels into integer percentages.\n                      # Try changing the accuracy = 5L argument\n                      # to learn what it does!\n                      labels = percent_format(accuracy = 5L)) + \n  # Theming\n  theme_minimal()+\n  theme(\n    legend.position = \"right\",\n    legend.text.align = 0,\n    legend.title = element_blank(),\n    plot.margin = unit(c(.5,.5,.2,.5), \"cm\")) +\n    theme(\n    axis.line = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n  ) +\n  \n  # some useful titles!\n  labs(x = \"\",\n       y = \"\",\n       title = \"% of Respondents Who Took the Post Election Survey\",\n       caption = \"Author: Pia Deshpande, \\n Data: 2020 Cooperative Election Study\")\n\n# Plotting (Code adapted from https://www.cgoodman.com/blog/archives/2018/06/16/maps-in-r-using-urbnmapr/)\n\nggplot() +\n  # County map\n  geom_polygon(data = post_map,\n               mapping = aes(x = long, y = lat,\n                             group = group,\n                             fill = mean_post)) +\n  # Add state outlines\n  geom_polygon(data = urbnmapr::states,\n               mapping = aes(long, lat,group = group),\n               fill = NA, color = \"#ffffff\", size = 0.4) +\n  # Projection\n  coord_map(projection = \"polyconic\")+\n  \n# scale_fill_gradient 2 helps us create *diverging* color scales!\n# I define red as a low point, white as the middle, and green\n# as the high point. \nscale_fill_gradient2(\n  low = \"red\",\n  mid = \"white\",\n  high = \"seagreen4\",\n  \n  # I define the midpoint explicitly here! \n  # I calculate it not as the mean of all the \n  # state averages, but as the mean of all CES\n  # respondents. That value will be where the\n  # scale is a stark white.\n  midpoint = mean(ces2020_selected$tookpost_recoded),\n  limits = c(0.75, 0.95), \n  labels = percent_format(accuracy = 5L)\n)+\n  # Theming\n  theme_minimal()+\n  theme(\n    legend.position = \"right\",\n    legend.text.align = 0,\n    legend.title = element_blank(),\n    plot.margin = unit(c(.5,.5,.2,.5), \"cm\")) +\n    theme(\n    axis.line = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n  ) + \n  labs(x = \"\",\n       y = \"\",\n       title = \"% of Respondents Who Took the Post Election Survey\",\n       caption = \"Author: Pia Deshpande, \\n Data: 2020 Cooperative Election Study\")\n\n# Let's try making a substantive map: what percentage of respondents were contacted\n# by a political campaign in 2020?\n\n# Let's select variables that we care about!\nces2020_substantive <- ces2020_dataverse %>%\n  select(\n    \n    # id for each respondent\n    caseid, \n    \n    # weight for survey analysis!\n    commonpostweight, \n    \n    # state respondent is registered in\n    state_fips_rough = inputstate_post, \n    \n    # were you contacted by a political campaign in 2020?\n    CC20_431a) %>%\n  \n  mutate(\n    contact = case_when(\n      \n      # I am recoding this so a \"Yes\" is a 1\n      # and a \"No\" is a 0.\n      CC20_431a == 1 ~ 1,\n      CC20_431a == 2 ~ 0\n    ),\n    state_fips = as.character(sprintf(\"%02d\", state_fips_rough))\n  ) %>%\n  \n  # We don't want to include someone if they did not take the post-election survey\n  drop_na(commonpostweight)\n\n\n# Check sample sizes of each state\nsample_cutoff <- ces2020_substantive %>%\n  group_by(state_fips) %>%\n  summarise(n = n()) %>%\n  \n  # only give me states with less than 200 responses\n  filter(n < 200)\n\nsample_cutoff\n\nsurvey <- svydesign(ids = ~0, \n                    data = ces2020_substantive, \n                    weights = ~commonpostweight)\n\ncontact_state <- as.data.frame(svyby(~contact, \n                                     ~state_fips, \n                                     survey, \n                                     svymean, \n                                     na.rm = TRUE)) %>%\n  \n  # I'm telling R to select all state_fips that were not in our\n  # table of states with less than <200 entries!\n  filter(!(state_fips %in% sample_cutoff$state_fips))\n\n# Join with urbnmapr\ncontact_map <- left_join(contact_state, \n                         states, by = \"state_fips\") %>%\n  \n  \n  # Spoiler! This step will let us make a tile map later on. We're specifying the dimensions of the \n  # tile here. I want my tiles to be square, but you can change this as you see fit.\n  mutate(xdimension = 1, \n         ydimension = 1) \nggplot() +\n  # County map\n  geom_polygon(data = contact_map,\n               mapping = aes(x = long, y = lat,\n                             group = group,\n                             \n                             # our variable of interest!\n                             fill = contact)) +\n  # Add state outlines\n  geom_polygon(data = urbnmapr::states,\n               mapping = aes(long, lat,group = group),\n               \n               # with the color argument, I am giving\n               # states a grey outline!\n               fill = NA, color = \"grey30\", size = 0.4) +\n  # Projection\n  coord_map(projection = \"polyconic\")+\n  \n  # purple seems like a bipartisan color?\n  scale_fill_gradient(low = \"plum\", \n                      high = \"mediumpurple4\", \n                      labels = percent_format(accuracy = 5L),\n                      limits = c(0.35, 0.75),\n                      \n                      # This blank \"\" means I do not want my \n                      # legend to have a title.\n                      \"\") + \n  \n  # Theming\n  theme_minimal()+\n  theme(\n    legend.position = \"right\",\n    legend.text.align = 0,\n    plot.margin = unit(c(.5,.5,.2,.5), \"cm\")) +\n  theme(\n    axis.line = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n  ) + \n  theme(plot.title=element_text(family=\"Open Sans Condensed Bold\", margin=margin(b=15)))+\n  theme(plot.subtitle=element_text(family=\"Open Sans Condensed Light Italic\"))+\n  theme(plot.margin=unit(rep(0.5, 4), \"cm\"))+\n  labs(x = \"\",\n       y = \"\",\n       title = \"% of Respondents Contacted by a Political Campaign in 2020\",\n       caption = \"Author: Pia Deshpande, Data: 2020 Cooperative Election Study\")\n# The following code is adapted from the Urban Institute's Tutorial\n# https://urbaninstitute.github.io/r-at-urban/mapping.html#geom_tile()\n\n# create a custom geofacet grid\n# This was constructed by the Urban Institute! I am using it here.\n# It tells R how to draw the grid, and how to name each square.\n# I am grateful someone else wrote this and not me!\n\nurban_grid <- tibble(\n  row = c(1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, \n          4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, \n          7, 7, 8, 8, 8),\n  col = c(1, 11, 6, 10, 11, 1, 2, 3, 4, 5, 6, 7, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 3, 4, 5, 6, 7, 8, 9, 4, 5, 6, 7, 8, 1, 4, 9),\n  code = c(\"AK\", \"ME\", \"WI\", \"VT\", \"NH\", \"WA\", \"ID\", \"MT\", \"ND\", \"MN\", \"IL\", \"MI\", \"NY\", \"MA\", \"OR\", \"NV\", \"WY\", \"SD\", \"IA\", \"IN\", \"OH\", \"PA\", \"NJ\", \"CT\", \"RI\", \"CA\", \"UT\", \"CO\", \"NE\", \"MO\", \"KY\", \"WV\", \"VA\", \"MD\", \"DE\", \"AZ\", \"NM\", \"KS\", \"AR\", \"TN\", \"NC\", \"SC\", \"DC\", \"OK\", \"LA\", \"MS\", \"AL\", \"GA\", \"HI\", \"TX\", \"FL\"),\n  name = c(\"Alaska\", \"Maine\", \"Wisconsin\", \"Vermont\", \"New Hampshire\", \"Washington\", \"Idaho\", \"Montana\", \"North Dakota\", \"Minnesota\", \"Illinois\", \"Michigan\", \"New York\", \"Massachusetts\", \"Oregon\", \"Nevada\", \"Wyoming\", \"South Dakota\", \"Iowa\", \"Indiana\", \"Ohio\", \"Pennsylvania\", \"New Jersey\", \"Connecticut\", \"Rhode Island\", \"California\", \"Utah\", \"Colorado\", \"Nebraska\", \"Missouri\", \"Kentucky\", \"West Virginia\", \"Virginia\", \"Maryland\", \"Delaware\", \"Arizona\", \"New Mexico\", \"Kansas\", \"Arkansas\", \"Tennessee\", \" North Carolina\", \"South Carolina\", \" District of Columbia\", \"Oklahoma\", \"Louisiana\", \"Mississippi\", \"Alabama\", \"Georgia\", \"Hawaii\", \"Texas\", \"Florida\")\n)\n\n\ncontact_map %>%\n  \n  # remember when I defined xdimension and ydimension a while ago?\n  # It's coming in handy here!\n  ggplot(aes(x = xdimension, y = ydimension, fill = contact)) +\n\n  # We're making a tile map!\n  geom_tile() +\n  \n  # I am defining some display text here. I want\n  # to print the value of \"contact,\" which is the \n  # estimated percentage of Americans in a certain\n  # state who were contacted by a political campaign!\n  \n  # However, this number is a decimal. Another way\n  # of formatting percentages is by multiplying them by 100\n  # and using the round function (I wanted no decimal places).\n  # I then use the paste0 function to add a pretty percentage sign!\n  geom_text(aes(label = paste0(round(contact*100,0), \"%\")),\n            \n            # this makes the text white!\n            color = \"white\") +\n\n  # Using our grid from before. Thanks again to the Urban Institute!\n  # I also want to facet by state_abbv (That is, make a new tile) for\n  # each state abbreviation.\n  facet_geo(facets = ~state_abbv, grid = urban_grid) +\n  labs(title = \"Percentage of Americans Contacted by a Political Campaign in 2020\",\n       subtitle = \"Adapted from Code from the Urban Institute\",\n       caption = \"Graph by Pia Deshpande \\n Data from the 2020 CES\",\n       x = NULL,\n       y = NULL) +\n  scale_fill_gradient(\n    \n  # Purple all the way down!\n  low = \"plum\",\n  high = \"mediumpurple4\",\n  \n  # No legend title please\n  \"\"\n)+\n  theme(plot.background = element_rect(colour = \"white\"),\n        panel.grid = element_blank(),\n        panel.grid.major = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        axis.line = element_blank(),\n        panel.spacing = unit(0L, \"pt\"),\n        legend.position = \"none\",\n        strip.text.x = element_text(size = 9L))\n```\n\n```         \n```\n","srcMarkdownNoYaml":"\n\n**Published:** November 29, 2021\n\n## What you’ll learn\n\n-   How to use parts of the `urbnmapr` package to make some maps\n\n-   Using `ggplot2` attributes to make your maps more readable\n\n-   When to not use maps (or at least think carefully before doing so)\n\nWhat won’t you learn? There is a lot that goes into maps: projection types (see Dan Kelley’s excellent [writeup](https://cran.r-project.org/web/packages/oce/vignettes/map_projections.html) on the subject), zip code fuzziness, and loading in shapefiles from the Census, just to name a few topics. Cartographers are beings of infinite knowledge and power, and I won’t be able to teach you all of their secrets (I don’t know most of them!). But don’t let that dissuade you! If you’re passionate about maps, this will be a good place for you to start. And if you just need to plot a state-level election outcome map for a class and are panicking, perhaps this tutorial will help you too.\n\nWe’ll also be using the `dataverse` and `survey` packages in this tutorial. I will not explain them in detail here. I have discussed them (and provided additional resources) in my last post: [*Plotting trends over time with the CES*](https://pdeshlab.github.io/tutorial2.html).\n\nMuch of this tutorial uses code that is adapted from an [article](https://www.cgoodman.com/blog/archives/2018/06/16/maps-in-r-using-urbnmapr/) by Christopher Goodman and the Urban Institute’s very own [tutorial](https://urbaninstitute.github.io/r-at-urban/mapping.html#Introduction). When I do this adapting, I note it in-text, but I wanted to give credit up-top too. Thank you for these incredible resources!\n\nAs always, we need to start our code by loading in packages. You’ll need the following to packages execute my code, which you can install with `install.packages(\"name\")`. You’ll then load them in like so:\n\n```{r, message = FALSE, warning = FALSE}\n#### LOAD PACKAGES ####\nlibrary(dataverse) # loading data\nlibrary(urbnmapr)  # geographic information for mapping!\nlibrary(ggplot2)   # pretty plots\nlibrary(geofacet)  # tile plots\nlibrary(scales)    # easy formatting\nlibrary(dplyr)     # data manipulation\nlibrary(survey)    # survey analysis\nlibrary(tidyverse) # the holy grail: more data wrangling\n\nlibrary(leaflet)   # optional: for interactive maps!\nlibrary(here)\n```\n\nThe only exception to this is the `urbnmapr` package, which you need to install from GitHub. This is easy to do! Make sure you have the `devtools` installed as well and run what is below. If you are using a Mac, you may run into some problems loading the `geofacet` package. If this happens, follow this guidance on [Stack Overflow](https://stackoverflow.com/questions/31717850/error-package-or-namespace-load-failed-for-ggplot2-and-for-data-table), but apply it to the packages that did not load correctly. You may need to remove package installations and re-install them. In general, make sure you have the `sf` package installed prior to attempting to re-install `geofacet`.\n\n```{r, eval = FALSE}\nrequire(\"devtools\")\ndevtools::install_github(\"UrbanInstitute/urbnmapr\")\n```\n\n## Getting the data\n\nWe’ll load in the 2020 CES data using the `dataverse` package.\n\n```{r, message = FALSE, warning = FALSE, results = FALSE}\n##### LOADING DATA ####\nces2020_dataverse <- get_dataframe_by_name(\n  filename = \"CES20_Common_OUTPUT_vv.dta\",\n  dataset = \"10.7910/DVN/E9N6PH\",\n  original = TRUE,\n  .f = haven::read_dta,\n  server = \"dataverse.harvard.edu\"\n)\n```\n\nNow before proceeding, we’ll need to decide what questions we want to answer with maps. Picking these questions is important, and not something this tutorial can completely teach you. I’ll include a checklist that I like to use when I have an urge to make a map, but you’ll have to do some thinking on your own, too.\n\nI’m interested in something methodological. The CES—and other surveys like it— often have multiple waves. There are many reasons for doing this. Maybe you want to see how respondents’ opinions will change after an important event (an election? The release of Red (Taylor’s Version)?). Perhaps you want to interview the same respondents again and again (called a panel study). Whatever your reason, you now have one main obstacle: attrition. It’s hard to get people to take surveys. Now getting those same people to take *another* one? It’s a tall task! I want to calculate what percentage of respondents failed to take the CES’ post-election survey in 2020 by state. And I want to map it!\n\nLet’s start by selecting relevant questions. We’ll need some kind of case identifier, the variable of interest, and a geography variable of some kind (to use in mapping). I am most interested in state differences, so I am selecting the inputstate variable.\n\nI do some other data manipulation in the following code to make things run smoothly (made sure state FIPS codes are interpreted correctly, and recoded the tookpost variable). I’ll explain what I’m doing in more detail in the code chunk!\n\n```{r}\n# Let's select variables that we care about!\nces2020_selected <- ces2020_dataverse %>%\n  select(\n    \n    # id for each respondent\n    caseid, \n    \n    # did you take the post-election survey?\n    tookpost, \n    \n    # state respondent is living in.\n    # In this code, I am both selecting\n    # the inputstate column and renaming\n    # it to state_fips rough, all in\n    # one line!\n    state_fips_rough = inputstate) %>%\n  mutate(\n    \n    # tookpost is originally coded so 2 = Yes\n    # and 1 = No. I am recoding it so Yes = 1\n    # and No = 0. Why? When I do calculations, \n    # the average of tookpost will be a proportion\n    # between 0 and 1 that I can represent as a \n    # percent (ex. \"85% of respondents took the\n    # post-election survey\").\n    tookpost_recoded = case_when(\n      tookpost == 1 ~ 0,\n      tookpost == 2 ~ 1,\n    ),\n    \n    # why am I changing state_fips_rough? Like\n    # most coding, things were breaking which inspired\n    # me to get creative. Try running this chunk without\n    # this line and look at ces2020_selected. See anything\n    # weird? Check before you read on!\n    state_fips = as.character(sprintf(\"%02d\", state_fips_rough))\n    \n    # Okay, now that you've looked, I'll spill the beans. \n    # State FIPS codes are always two digits, like 15, 50, \n    # and 02. R was reading in single digits like 02 as\n    # just 2, which is a problem later on. To fix this\n    # I used the function sprintf to tell R to add\n    # leading zeroes to state_fips_rough until there\n    # were two digits per entry. So a value of 4 would\n    # turn into 04, but 36 would stay 36! I can't spend\n    # more time on this now, but if people are interested\n    # in this kind of data manipulation, I am happy to write\n    # about it!\n  )\n\n```\n\nBefore we move forward, I want to see what sample sizes we’re working with. I can do this with the lovely `dplyr` and using piping.\n\n```{r}\n# hey R, for the following, use ces2020_selected please!\nces2020_selected %>%\n  \n  # whatever calculation I tell you to do, please\n  # do it grouped--- that is, only within entries\n  # with the same state FIPS code.\n  group_by(state_fips) %>%\n  \n  # could you tell me how many entries I have per\n  # state?\n  summarise(n = n())\n```\n\n```{r}\n# you'll notice that the whole table does not print here.\n# To see the entire thing, print it in your R console\n```\n\nInteresting! It’s cool to see how the CES samples across the United States. Because I’m interested in just looking at the CES as is (and not using the CES to make a hypothesis about Americans writ large), I don’t need to do any other steps here. These numbers will be good to keep in mind as we calculate what percentage of respondents took the post-election survey by state. Actually, let’s go ahead and calculate that with `dplyr`!\n\n```{r}\npost_aggregate <- ces2020_selected %>%\n  group_by(state_fips) %>%\n  \n  # give me the mean of tookpost_recoded \n  # for each state, and make that a new\n  # variable called mean_post\n  summarise(mean_post = mean(tookpost_recoded))\n\n# let's take a look!\npost_aggregate\n```\n\nNow it’s time to use the `urbnmapr` package developed by The Urban Institute. Mapping is actually quite complicated! Even though we now have a summary table that tells us what percentage of respondents took the post-election survey for each state, R still needs to be able to draw the map! How will it know what states are shaped like? How boundaries intersect? How will it make the map pretty?\n\nYou try drawing a map of the U.S. from scratch without guidlines. It’s hard! `urbnmapr` helps by letting us pull from its database. Below, I use our state_fips column to pull geographic details from `urbnmapr`. I can do this because `urbnmapr` has a databse with a column named state_fips (almost like I named it the same on purpose!).\n\n```{r}\npost_map <- left_join(post_aggregate, \n                      urbnmapr::states, by = \"state_fips\")\n\npost_map\n```\n\nWhen we print post_map, you’ll notice a lot of information that we didn’t have before. It looks like we have longitude and latitude, some other visual helpers for mapping, as well as helpful state abbreviations! We retain our other data (most importantly— our mean_post stat).\n\nBelieve it or not, it’s now time to map. The code for creating maps can be daunting, and I’ll present a big chunk to you with annotations. You should feel free to try this code with lines removed to see how the map would appear differently!\n\n```{r, message = FALSE}\n# Plotting \n# Code adapted from: \n# https://www.cgoodman.com/blog/archives/2018/06/16/maps-in-r-using-urbnmapr/\n# I also retain some of Chris' annotations here for clarity.\n\nggplot() +\n  \n  # county map\n  geom_polygon(data = post_map,\n               mapping = aes(x = long, y = lat,\n                             group = group,\n                             \n                             # I want the color \n                             # that each state\n                             # has to depend\n                             # on mean_post!\n                             fill = mean_post)) +\n \n   # add state outlines using urbnmapr\n  geom_polygon(data = urbnmapr::states,\n               # when we write urbnmapr::states\n               # we are telling R to specifically\n               # use the urbnmapr package to pull up\n               # states. Some coders like using this notation\n               # consistently ---whenever they use a function\n               # they tell R which package it comes from.\n               # I don't do that, but if your code is\n               # breaking and you don't know why--- try\n               # calling on the package explicitly (sometimes)\n               # packages have functions that are named the\n               # same thing, which confuses R!\n               \n               mapping = aes(long, lat,group = group),\n               fill = NA, color = \"#ffffff\", size = 0.4) +\n  \n  # projection\n  coord_map(projection = \"polyconic\")+\n  \n  # I want to create a scale that goes from low to\n  # high, where the color of the high value connotes\n  # that things are good. In the United States,\n  # the color green is often the \"good\" or \"everything's\n  # fine\" color, so I'll use a version of that.\n  \n  # You can find an R Color Cheat Sheet here by Melanie Frazier: \n  # https://www.nceas.ucsb.edu/sites/default/files/2020-04/colorPaletteCheatsheet.pdf\n  scale_fill_gradient(low = \"white\", \n                      high = \"seagreen4\", \n                      \n                      # I can define limits explicitly if I want.\n                      # If you do this, always check that you are not\n                      # accidentally excluding data! (I made sure all my)\n                      # data fit in this range reasonably.\n                      limits = c(0.75, 0.95), \n                      \n                      # Right now my code is in decimals.\n                      # We can use a trick we learned last tutorial\n                      # to make the labels into integer percentages.\n                      # Try changing the accuracy = 5L argument\n                      # to learn what it does!\n                      labels = percent_format(accuracy = 5L)) + \n  # Theming\n  theme_minimal()+\n  theme(\n    legend.position = \"right\",\n    legend.text.align = 0,\n    legend.title = element_blank(),\n    plot.margin = unit(c(.5,.5,.2,.5), \"cm\")) +\n    theme(\n    axis.line = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n  ) +\n  \n  # some useful titles!\n  labs(x = \"\",\n       y = \"\",\n       title = \"% of Respondents Who Took the Post Election Survey\",\n       caption = \"Author: Pia Deshpande, \\n Data: 2020 Cooperative Election Study\")\n\n```\n\nAnd ta da! A map! It seems like respondents don’t take the post election survey as frequenty in Mississippi, Arkansas, Oklahoma, Alaska, and Texas, among others. On the other hand, New Mexico and New Hampshire seem to be avid survey takers.\n\nThere are some good things about the map, and some bad things.\n\nLet’s start with the bad. All maps take data that is detailed, and represents that data in a less detailed way to be intelligible. I’m not sure exactly what percentage of Texans took the post-election survey, and to find out, I would need to pull up that table we created earlier! The color scale I picked gives me some idea how states are doing compared to each other, but not how they are doing compared to some norm. What if I wanted to see which states were below the CES’ national average? This would not be the plot to use then! Another bad thing is endemic to this type of map — I’ve talked about Texas twice now. Why? Well, it’s big on the map, and my eye wants to pay attention to it. The north east is dwarfed completely, and it makes it hard to see trends there.\n\nOkay, but are there good things? Yes! Using state geography has its benefits. Your readers will likely be familiar with this type of map. They’ll know where to glance for their home state, and will (hopefully) be able to locate others. My color scale progresses from white to green, which gives the effect of states with a lower response rate being kinda transparent. That’s neat! Conceptually, it makes sense that Oklahoma is fading out compared to New Mexico, which took the post-election survey at a much higher rate.\n\nWe shouldn’t just settle for this map as is! Though some problems can’t be solved with maps at all (not being able to see the data exactly) or with chloropleths (state geographies); some can be solved! Let’s make a map that will help me tell the world which states are doing above, below, and around average on taking the post-election survey. I’ll do this by changing the color scale.\n\n```{r}\n# Plotting (Code adapted from https://www.cgoodman.com/blog/archives/2018/06/16/maps-in-r-using-urbnmapr/)\n\nggplot() +\n  # County map\n  geom_polygon(data = post_map,\n               mapping = aes(x = long, y = lat,\n                             group = group,\n                             fill = mean_post)) +\n  # Add state outlines\n  geom_polygon(data = urbnmapr::states,\n               mapping = aes(long, lat,group = group),\n               fill = NA, color = \"#ffffff\", size = 0.4) +\n  # Projection\n  coord_map(projection = \"polyconic\")+\n  \n# scale_fill_gradient 2 helps us create *diverging* color scales!\n# I define red as a low point, white as the middle, and green\n# as the high point. \nscale_fill_gradient2(\n  low = \"red\",\n  mid = \"white\",\n  high = \"seagreen4\",\n  \n  # I define the midpoint explicitly here! \n  # I calculate it not as the mean of all the \n  # state averages, but as the mean of all CES\n  # respondents. That value will be where the\n  # scale is a stark white.\n  midpoint = mean(ces2020_selected$tookpost_recoded),\n  limits = c(0.75, 0.95), \n  labels = percent_format(accuracy = 5L)\n)+\n  # Theming\n  theme_minimal()+\n  theme(\n    legend.position = \"right\",\n    legend.text.align = 0,\n    legend.title = element_blank(),\n    plot.margin = unit(c(.5,.5,.2,.5), \"cm\")) +\n    theme(\n    axis.line = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n  ) + \n  labs(x = \"\",\n       y = \"\",\n       title = \"% of Respondents Who Took the Post Election Survey\",\n       caption = \"Author: Pia Deshpande, \\n Data: 2020 Cooperative Election Study\")\n```\n\nWell this looks different! States that are around average fade into the background (goodbye Oregon!), while outliers are bleeding and verdant. Mississippi really stands out here, and so does New Hampshire!\n\n## What about substantive maps?\n\nOkay, but I need to write a paper by the end of the semester using survey questions to show my teacher how weighting works. How do I make a map for that?\n\nHave no fear! This section will help you. Let’s map what percentage of Americans were contacted by a political campaign in 2020 and how that differs by state.\n\nMaking a substantive map means we need to be using all of our normal data analysis tools. That is, when we calculate summary statistics, we should use survey weights and the `survey` function. It also means being well aware of sample size. For this analysis, if a state has less than 200 observations, I exclude it from my analysis. Since that state will still be on the map, we’ll have to decide how we depict it.\n\nFirst, let’s select relevant variables from `ces2020_dataverse`, just like we did for the first set of maps!\n\n```{r}\n# Let's try making a substantive map: what percentage of respondents were contacted\n# by a political campaign in 2020?\n\n# Let's select variables that we care about!\nces2020_substantive <- ces2020_dataverse %>%\n  select(\n    \n    # id for each respondent\n    caseid, \n    \n    # weight for survey analysis!\n    commonpostweight, \n    \n    # state respondent is registered in\n    state_fips_rough = inputstate_post, \n    \n    # were you contacted by a political campaign in 2020?\n    CC20_431a) %>%\n  \n  mutate(\n    contact = case_when(\n      \n      # I am recoding this so a \"Yes\" is a 1\n      # and a \"No\" is a 0.\n      CC20_431a == 1 ~ 1,\n      CC20_431a == 2 ~ 0\n    ),\n    state_fips = as.character(sprintf(\"%02d\", state_fips_rough))\n  ) %>%\n  \n  # We don't want to include someone if they did not take the post-election survey\n  drop_na(commonpostweight)\n```\n\nJust like last time, we should look at state samples. I’m not comfortable making an inference about a state if less than 200 people were polled there. Let’s find which states we should cull from our analysis.\n\n```{r}\n# Check sample sizes of each state\nsample_cutoff <- ces2020_substantive %>%\n  group_by(state_fips) %>%\n  summarise(n = n()) %>%\n  \n  # only give me states with less than 200 responses\n  filter(n < 200)\n\nsample_cutoff\n```\n\nThis means we are going to have to exclude states with fips code 56, 02, 50, 38, 46, 11, 44, and 15. Looking at the CES guide this is Wyoming, Alaska, Vermont, North Dakota, South Dakota, the District of Columbia (which is not a state right now!), Rhode Island, and Hawaii, respectively. Sad to see them go, but it’s better than making unsound claims!\n\nNow to calculate some statistics. Since I went through the `survey` package in more detail in my previous tutorial, I won’t reiterate myself here.\n\n```{r}\nsurvey <- svydesign(ids = ~0, \n                    data = ces2020_substantive, \n                    weights = ~commonpostweight)\n\ncontact_state <- as.data.frame(svyby(~contact, \n                                     ~state_fips, \n                                     survey, \n                                     svymean, \n                                     na.rm = TRUE)) %>%\n  \n  # I'm telling R to select all state_fips that were not in our\n  # table of states with less than <200 entries!\n  filter(!(state_fips %in% sample_cutoff$state_fips))\n\n# Join with urbnmapr\ncontact_map <- left_join(contact_state, \n                         states, by = \"state_fips\") %>%\n  \n  \n  # Spoiler! This step will let us make a tile map later on. We're specifying the dimensions of the \n  # tile here. I want my tiles to be square, but you can change this as you see fit.\n  mutate(xdimension = 1, \n         ydimension = 1) \n```\n\nNow to plot! Let’s first try to map a standard U.S. state geography with a sequential scale (low to high, with no midpoint to facilitate diverging). There will be less comments this time around!\n\n```{r, warning = FALSE, message = FALSE}\nggplot() +\n  # County map\n  geom_polygon(data = contact_map,\n               mapping = aes(x = long, y = lat,\n                             group = group,\n                             \n                             # our variable of interest!\n                             fill = contact)) +\n  # Add state outlines\n  geom_polygon(data = urbnmapr::states,\n               mapping = aes(long, lat,group = group),\n               \n               # with the color argument, I am giving\n               # states a grey outline!\n               fill = NA, color = \"grey30\", size = 0.4) +\n  # Projection\n  coord_map(projection = \"polyconic\")+\n  \n  # purple seems like a bipartisan color?\n  scale_fill_gradient(low = \"plum\", \n                      high = \"mediumpurple4\", \n                      labels = percent_format(accuracy = 5L),\n                      limits = c(0.35, 0.75),\n                      \n                      # This blank \"\" means I do not want my \n                      # legend to have a title.\n                      \"\") + \n  \n  # Theming\n  theme_minimal()+\n  theme(\n    legend.position = \"right\",\n    legend.text.align = 0,\n    plot.margin = unit(c(.5,.5,.2,.5), \"cm\")) +\n  theme(\n    axis.line = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n  ) + \n  theme(plot.title=element_text(family=\"Open Sans Condensed Bold\", margin=margin(b=15)))+\n  theme(plot.subtitle=element_text(family=\"Open Sans Condensed Light Italic\"))+\n  theme(plot.margin=unit(rep(0.5, 4), \"cm\"))+\n  labs(x = \"\",\n       y = \"\",\n       title = \"% of Respondents Contacted by a Political Campaign in 2020\",\n       caption = \"Author: Pia Deshpande, Data: 2020 Cooperative Election Study\")\n\n```\n\nThere she is! The states that are missing are in stark white (notice how I did not have my scale start with white?). We see some states like Montana with a pretty high campaign contact rate, and soms states like Louisiana with a pretty low one. However, there’s a problem — we used the `survey` package to calculate these values, and they have standard errors. There’s not a good way to represent standard errors in our map as it currently exists!\n\nWhy are we worried about standard errors here? I was suspiciously silent about them with our first map. It’s because our first map was depicting something about CES respondents, which means our sample was *the same* as our population of interest (an incredible and rare thing). But when we analyze substantive questions, we’re usually trying to use the survey as a proxy for how a certain population behaves (in this case, the American public), which means our estimates have uncertainty to them. People who make maps and use them in their analysis are aware of this difficulty, and there are ways to overcome it that I won’t go into in this tutorial— mostly because I am not equipped to teach you something I do not know! Penn State’s Department of Geography has a good [writeup](https://www.e-education.psu.edu/geog486/node/693) on the topic of mapping uncertainty.\n\nBut for our tutorial, there is one problem I might try and solve — state geography. Shy of redrawing all the state lines, I think we should make a tile map. In a tile map, all states are represented by similar sized squares, so readers will weigh them equally as they visually process them.\n\n```{r}\n\n# The following code is adapted from the Urban Institute's Tutorial\n# https://urbaninstitute.github.io/r-at-urban/mapping.html#geom_tile()\n\n# create a custom geofacet grid\n# This was constructed by the Urban Institute! I am using it here.\n# It tells R how to draw the grid, and how to name each square.\n# I am grateful someone else wrote this and not me!\n\nurban_grid <- tibble(\n  row = c(1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, \n          4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, \n          7, 7, 8, 8, 8),\n  col = c(1, 11, 6, 10, 11, 1, 2, 3, 4, 5, 6, 7, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 3, 4, 5, 6, 7, 8, 9, 4, 5, 6, 7, 8, 1, 4, 9),\n  code = c(\"AK\", \"ME\", \"WI\", \"VT\", \"NH\", \"WA\", \"ID\", \"MT\", \"ND\", \"MN\", \"IL\", \"MI\", \"NY\", \"MA\", \"OR\", \"NV\", \"WY\", \"SD\", \"IA\", \"IN\", \"OH\", \"PA\", \"NJ\", \"CT\", \"RI\", \"CA\", \"UT\", \"CO\", \"NE\", \"MO\", \"KY\", \"WV\", \"VA\", \"MD\", \"DE\", \"AZ\", \"NM\", \"KS\", \"AR\", \"TN\", \"NC\", \"SC\", \"DC\", \"OK\", \"LA\", \"MS\", \"AL\", \"GA\", \"HI\", \"TX\", \"FL\"),\n  name = c(\"Alaska\", \"Maine\", \"Wisconsin\", \"Vermont\", \"New Hampshire\", \"Washington\", \"Idaho\", \"Montana\", \"North Dakota\", \"Minnesota\", \"Illinois\", \"Michigan\", \"New York\", \"Massachusetts\", \"Oregon\", \"Nevada\", \"Wyoming\", \"South Dakota\", \"Iowa\", \"Indiana\", \"Ohio\", \"Pennsylvania\", \"New Jersey\", \"Connecticut\", \"Rhode Island\", \"California\", \"Utah\", \"Colorado\", \"Nebraska\", \"Missouri\", \"Kentucky\", \"West Virginia\", \"Virginia\", \"Maryland\", \"Delaware\", \"Arizona\", \"New Mexico\", \"Kansas\", \"Arkansas\", \"Tennessee\", \" North Carolina\", \"South Carolina\", \" District of Columbia\", \"Oklahoma\", \"Louisiana\", \"Mississippi\", \"Alabama\", \"Georgia\", \"Hawaii\", \"Texas\", \"Florida\")\n)\n\n\ncontact_map %>%\n  \n  # remember when I defined xdimension and ydimension a while ago?\n  # It's coming in handy here!\n  ggplot(aes(x = xdimension, y = ydimension, fill = contact)) +\n\n  # We're making a tile map!\n  geom_tile() +\n  \n  # I am defining some display text here. I want\n  # to print the value of \"contact,\" which is the \n  # estimated percentage of Americans in a certain\n  # state who were contacted by a political campaign!\n  \n  # However, this number is a decimal. Another way\n  # of formatting percentages is by multiplying them by 100\n  # and using the round function (I wanted no decimal places).\n  # I then use the paste0 function to add a pretty percentage sign!\n  geom_text(aes(label = paste0(round(contact*100,0), \"%\")),\n            \n            # this makes the text white!\n            color = \"white\") +\n\n  # Using our grid from before. Thanks again to the Urban Institute!\n  # I also want to facet by state_abbv (That is, make a new tile) for\n  # each state abbreviation.\n  facet_geo(facets = ~state_abbv, grid = urban_grid) +\n  labs(title = \"Percentage of Americans Contacted by a Political Campaign in 2020\",\n       subtitle = \"Adapted from Code from the Urban Institute\",\n       caption = \"Graph by Pia Deshpande \\n Data from the 2020 CES\",\n       x = NULL,\n       y = NULL) +\n  scale_fill_gradient(\n    \n  # Purple all the way down!\n  low = \"plum\",\n  high = \"mediumpurple4\",\n  \n  # No legend title please\n  \"\"\n)+\n  theme(plot.background = element_rect(colour = \"white\"),\n        panel.grid = element_blank(),\n        panel.grid.major = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        axis.line = element_blank(),\n        panel.spacing = unit(0L, \"pt\"),\n        legend.position = \"none\",\n        strip.text.x = element_text(size = 9L))\n\n```\n\nOkay! We have it! A graph-table-color thing! An abomination of nature that does fix some of our problems, but adds new ones. Readers are no longer going to see Texas as more important than Connecticut because of state size, and they can now look at the exact percentage. Data we excluded is also easy to spot! However, because this chart provides more information, it asks viewers to spend more time looking at it. This is a complicated figure—and you could argue that the color fill behind the text label doesn’t do much.\n\nAll maps are trade offs. In fact, even using a map is a pretty important choice! How should you decide?\n\n## Okay, when should I use a map?\n\n-   I am genuinely interested in answering a *geographic* question, and a map would help.\n\n-   I have thought carefully about the geography I am using and whether it is appropriate. (For example, if you are interested in studying different levels of property tax, the state geography will be too broad for you. Most property taxes are decided at the local level).\n\n-   I have thought about the trade offs of using maps and selected the best type of map. Tile maps are great when you don’t want the size of states, countries, or territories to make readers weigh larger geographic regions more importantly than small ones. On the other hand, state geography is recognizable, and can help people interpret your results. You have to make some important choices!\n\n-   I have thought about mapping uncertainty and am either comfortable with not doing it (see our first slew of maps) or have determined how I will signal uncertainty to readers.\n\nThat brings us to the end of our tutorial. As always, the whole script is below (slightly rearranged so it will hopefully run smoothly on your computer).\n\n## The whole script\n\n```{r, eval = FALSE}\nknitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE)\n# Setting up my RmD file\n\nlibrary(knitr)\n# A package for knitting things together!\nlibrary(htmlwidgets)\n# A package to save leaflet HTML so we can render these maps in Jekyll. If you are just looking at your maps on your local PC, you won't need to do this.\n# A special thanks to Rob Williams for his tutorial on how to do this: https://jayrobwilliams.com/posts/2020/09/jekyll-html\n\n#### LOAD PACKAGES ####\nlibrary(dataverse) # loading data\nlibrary(urbnmapr)  # geographic information for mapping!\nlibrary(ggplot2)   # pretty plots\nlibrary(geofacet)  # tile plots\nlibrary(scales)    # easy formatting\nlibrary(dplyr)     # data manipulation\nlibrary(survey)    # survey analysis\nlibrary(tidyverse) # the holy grail: more data wrangling\n\nlibrary(leaflet)   # optional: for interactive maps!\nlibrary(here)\n\nrequire(\"devtools\")\ndevtools::install_github(\"UrbanInstitute/urbnmapr\")\n##### LOADING DATA ####\nces2020_dataverse <- get_dataframe_by_name(\n  filename = \"CES20_Common_OUTPUT_vv.dta\",\n  dataset = \"10.7910/DVN/E9N6PH\",\n  original = TRUE,\n  .f = haven::read_dta,\n  server = \"dataverse.harvard.edu\"\n)\n# Let's select variables that we care about!\nces2020_selected <- ces2020_dataverse %>%\n  select(\n    \n    # id for each respondent\n    caseid, \n    \n    # did you take the post-election survey?\n    tookpost, \n    \n    # state respondent is living in.\n    # In this code, I am both selecting\n    # the inputstate column and renaming\n    # it to state_fips rough, all in\n    # one line!\n    state_fips_rough = inputstate) %>%\n  mutate(\n    \n    # tookpost is originally coded so 2 = Yes\n    # and 1 = No. I am recoding it so Yes = 1\n    # and No = 0. Why? When I do calculations, \n    # the average of tookpost will be a proportion\n    # between 0 and 1 that I can represent as a \n    # percent (ex. \"85% of respondents took the\n    # post-election survey\").\n    tookpost_recoded = case_when(\n      tookpost == 1 ~ 0,\n      tookpost == 2 ~ 1,\n    ),\n    \n    # why am I changing state_fips_rough? Like\n    # most coding, things were breaking which inspired\n    # me to get creative. Try running this chunk without\n    # this line and look at ces2020_selected. See anything\n    # weird? Check before you read on!\n    state_fips = as.character(sprintf(\"%02d\", state_fips_rough))\n    \n    # Okay, now that you've looked, I'll spill the beans. \n    # State FIPS codes are always two digits, like 15, 50, \n    # and 02. R was reading in single digits like 02 as\n    # just 2, which is a problem later on. To fix this\n    # I used the function sprintf to tell R to add\n    # leading zeroes to state_fips_rough until there\n    # were two digits per entry. So a value of 4 would\n    # turn into 04, but 36 would stay 36! I can't spend\n    # more time on this now, but if people are interested\n    # in this kind of data manipulation, I am happy to write\n    # about it!\n  )\n\n# hey R, for the following, use ces2020_selected please!\nces2020_selected %>%\n  \n  # whatever calculation I tell you to do, please\n  # do it grouped--- that is, only within entries\n  # with the same state FIPS code.\n  group_by(state_fips) %>%\n  \n  # could you tell me how many entries I have per\n  # state?\n  summarise(n = n())\n\n\n# you'll notice that the whole table does not print here.\n# To see the entire thing, print it in your R console\npost_aggregate <- ces2020_selected %>%\n  group_by(state_fips) %>%\n  \n  # give me the mean of tookpost_recoded \n  # for each state, and make that a new\n  # variable called mean_post\n  summarise(mean_post = mean(tookpost_recoded))\n\n# let's take a look!\npost_aggregate\npost_map <- left_join(post_aggregate, \n                      states, by = \"state_fips\")\n\npost_map\n# Plotting \n# Code adapted from: \n# https://www.cgoodman.com/blog/archives/2018/06/16/maps-in-r-using-urbnmapr/\n# I also retain some of Chris' annotations here for clarity.\n\nggplot() +\n  \n  # county map\n  geom_polygon(data = post_map,\n               mapping = aes(x = long, y = lat,\n                             group = group,\n                             \n                             # I want the color \n                             # that each state\n                             # has to depend\n                             # on mean_post!\n                             fill = mean_post)) +\n \n   # add state outlines using urbnmapr\n  geom_polygon(data = urbnmapr::states,\n               # when we write urbnmapr::states\n               # we are telling R to specifically\n               # use the urbnmapr package to pull up\n               # states. Some coders like using this notation\n               # consistently ---whenever they use a function\n               # they tell R which package it comes from.\n               # I don't do that, but if your code is\n               # breaking and you don't know why--- try\n               # calling on the package explicitly (sometimes)\n               # packages have functions that are named the\n               # same thing, which confuses R!\n               \n               mapping = aes(long, lat,group = group),\n               fill = NA, color = \"#ffffff\", size = 0.4) +\n  \n  # projection\n  coord_map(projection = \"polyconic\")+\n  \n  # I want to create a scale that goes from low to\n  # high, where the color of the high value connotes\n  # that things are good. In the United States,\n  # the color green is often the \"good\" or \"everything's\n  # fine\" color, so I'll use a version of that.\n  \n  # You can find an R Color Cheat Sheet here by Melanie Frazier: \n  # https://www.nceas.ucsb.edu/sites/default/files/2020-04/colorPaletteCheatsheet.pdf\n  scale_fill_gradient(low = \"white\", \n                      high = \"seagreen4\", \n                      \n                      # I can define limits explicitly if I want.\n                      # If you do this, always check that you are not\n                      # accidentally excluding data! (I made sure all my)\n                      # data fit in this range reasonably.\n                      limits = c(0.75, 0.95), \n                      \n                      # Right now my code is in decimals.\n                      # We can use a trick we learned last tutorial\n                      # to make the labels into integer percentages.\n                      # Try changing the accuracy = 5L argument\n                      # to learn what it does!\n                      labels = percent_format(accuracy = 5L)) + \n  # Theming\n  theme_minimal()+\n  theme(\n    legend.position = \"right\",\n    legend.text.align = 0,\n    legend.title = element_blank(),\n    plot.margin = unit(c(.5,.5,.2,.5), \"cm\")) +\n    theme(\n    axis.line = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n  ) +\n  \n  # some useful titles!\n  labs(x = \"\",\n       y = \"\",\n       title = \"% of Respondents Who Took the Post Election Survey\",\n       caption = \"Author: Pia Deshpande, \\n Data: 2020 Cooperative Election Study\")\n\n# Plotting (Code adapted from https://www.cgoodman.com/blog/archives/2018/06/16/maps-in-r-using-urbnmapr/)\n\nggplot() +\n  # County map\n  geom_polygon(data = post_map,\n               mapping = aes(x = long, y = lat,\n                             group = group,\n                             fill = mean_post)) +\n  # Add state outlines\n  geom_polygon(data = urbnmapr::states,\n               mapping = aes(long, lat,group = group),\n               fill = NA, color = \"#ffffff\", size = 0.4) +\n  # Projection\n  coord_map(projection = \"polyconic\")+\n  \n# scale_fill_gradient 2 helps us create *diverging* color scales!\n# I define red as a low point, white as the middle, and green\n# as the high point. \nscale_fill_gradient2(\n  low = \"red\",\n  mid = \"white\",\n  high = \"seagreen4\",\n  \n  # I define the midpoint explicitly here! \n  # I calculate it not as the mean of all the \n  # state averages, but as the mean of all CES\n  # respondents. That value will be where the\n  # scale is a stark white.\n  midpoint = mean(ces2020_selected$tookpost_recoded),\n  limits = c(0.75, 0.95), \n  labels = percent_format(accuracy = 5L)\n)+\n  # Theming\n  theme_minimal()+\n  theme(\n    legend.position = \"right\",\n    legend.text.align = 0,\n    legend.title = element_blank(),\n    plot.margin = unit(c(.5,.5,.2,.5), \"cm\")) +\n    theme(\n    axis.line = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n  ) + \n  labs(x = \"\",\n       y = \"\",\n       title = \"% of Respondents Who Took the Post Election Survey\",\n       caption = \"Author: Pia Deshpande, \\n Data: 2020 Cooperative Election Study\")\n\n# Let's try making a substantive map: what percentage of respondents were contacted\n# by a political campaign in 2020?\n\n# Let's select variables that we care about!\nces2020_substantive <- ces2020_dataverse %>%\n  select(\n    \n    # id for each respondent\n    caseid, \n    \n    # weight for survey analysis!\n    commonpostweight, \n    \n    # state respondent is registered in\n    state_fips_rough = inputstate_post, \n    \n    # were you contacted by a political campaign in 2020?\n    CC20_431a) %>%\n  \n  mutate(\n    contact = case_when(\n      \n      # I am recoding this so a \"Yes\" is a 1\n      # and a \"No\" is a 0.\n      CC20_431a == 1 ~ 1,\n      CC20_431a == 2 ~ 0\n    ),\n    state_fips = as.character(sprintf(\"%02d\", state_fips_rough))\n  ) %>%\n  \n  # We don't want to include someone if they did not take the post-election survey\n  drop_na(commonpostweight)\n\n\n# Check sample sizes of each state\nsample_cutoff <- ces2020_substantive %>%\n  group_by(state_fips) %>%\n  summarise(n = n()) %>%\n  \n  # only give me states with less than 200 responses\n  filter(n < 200)\n\nsample_cutoff\n\nsurvey <- svydesign(ids = ~0, \n                    data = ces2020_substantive, \n                    weights = ~commonpostweight)\n\ncontact_state <- as.data.frame(svyby(~contact, \n                                     ~state_fips, \n                                     survey, \n                                     svymean, \n                                     na.rm = TRUE)) %>%\n  \n  # I'm telling R to select all state_fips that were not in our\n  # table of states with less than <200 entries!\n  filter(!(state_fips %in% sample_cutoff$state_fips))\n\n# Join with urbnmapr\ncontact_map <- left_join(contact_state, \n                         states, by = \"state_fips\") %>%\n  \n  \n  # Spoiler! This step will let us make a tile map later on. We're specifying the dimensions of the \n  # tile here. I want my tiles to be square, but you can change this as you see fit.\n  mutate(xdimension = 1, \n         ydimension = 1) \nggplot() +\n  # County map\n  geom_polygon(data = contact_map,\n               mapping = aes(x = long, y = lat,\n                             group = group,\n                             \n                             # our variable of interest!\n                             fill = contact)) +\n  # Add state outlines\n  geom_polygon(data = urbnmapr::states,\n               mapping = aes(long, lat,group = group),\n               \n               # with the color argument, I am giving\n               # states a grey outline!\n               fill = NA, color = \"grey30\", size = 0.4) +\n  # Projection\n  coord_map(projection = \"polyconic\")+\n  \n  # purple seems like a bipartisan color?\n  scale_fill_gradient(low = \"plum\", \n                      high = \"mediumpurple4\", \n                      labels = percent_format(accuracy = 5L),\n                      limits = c(0.35, 0.75),\n                      \n                      # This blank \"\" means I do not want my \n                      # legend to have a title.\n                      \"\") + \n  \n  # Theming\n  theme_minimal()+\n  theme(\n    legend.position = \"right\",\n    legend.text.align = 0,\n    plot.margin = unit(c(.5,.5,.2,.5), \"cm\")) +\n  theme(\n    axis.line = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n  ) + \n  theme(plot.title=element_text(family=\"Open Sans Condensed Bold\", margin=margin(b=15)))+\n  theme(plot.subtitle=element_text(family=\"Open Sans Condensed Light Italic\"))+\n  theme(plot.margin=unit(rep(0.5, 4), \"cm\"))+\n  labs(x = \"\",\n       y = \"\",\n       title = \"% of Respondents Contacted by a Political Campaign in 2020\",\n       caption = \"Author: Pia Deshpande, Data: 2020 Cooperative Election Study\")\n# The following code is adapted from the Urban Institute's Tutorial\n# https://urbaninstitute.github.io/r-at-urban/mapping.html#geom_tile()\n\n# create a custom geofacet grid\n# This was constructed by the Urban Institute! I am using it here.\n# It tells R how to draw the grid, and how to name each square.\n# I am grateful someone else wrote this and not me!\n\nurban_grid <- tibble(\n  row = c(1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, \n          4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, \n          7, 7, 8, 8, 8),\n  col = c(1, 11, 6, 10, 11, 1, 2, 3, 4, 5, 6, 7, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 3, 4, 5, 6, 7, 8, 9, 4, 5, 6, 7, 8, 1, 4, 9),\n  code = c(\"AK\", \"ME\", \"WI\", \"VT\", \"NH\", \"WA\", \"ID\", \"MT\", \"ND\", \"MN\", \"IL\", \"MI\", \"NY\", \"MA\", \"OR\", \"NV\", \"WY\", \"SD\", \"IA\", \"IN\", \"OH\", \"PA\", \"NJ\", \"CT\", \"RI\", \"CA\", \"UT\", \"CO\", \"NE\", \"MO\", \"KY\", \"WV\", \"VA\", \"MD\", \"DE\", \"AZ\", \"NM\", \"KS\", \"AR\", \"TN\", \"NC\", \"SC\", \"DC\", \"OK\", \"LA\", \"MS\", \"AL\", \"GA\", \"HI\", \"TX\", \"FL\"),\n  name = c(\"Alaska\", \"Maine\", \"Wisconsin\", \"Vermont\", \"New Hampshire\", \"Washington\", \"Idaho\", \"Montana\", \"North Dakota\", \"Minnesota\", \"Illinois\", \"Michigan\", \"New York\", \"Massachusetts\", \"Oregon\", \"Nevada\", \"Wyoming\", \"South Dakota\", \"Iowa\", \"Indiana\", \"Ohio\", \"Pennsylvania\", \"New Jersey\", \"Connecticut\", \"Rhode Island\", \"California\", \"Utah\", \"Colorado\", \"Nebraska\", \"Missouri\", \"Kentucky\", \"West Virginia\", \"Virginia\", \"Maryland\", \"Delaware\", \"Arizona\", \"New Mexico\", \"Kansas\", \"Arkansas\", \"Tennessee\", \" North Carolina\", \"South Carolina\", \" District of Columbia\", \"Oklahoma\", \"Louisiana\", \"Mississippi\", \"Alabama\", \"Georgia\", \"Hawaii\", \"Texas\", \"Florida\")\n)\n\n\ncontact_map %>%\n  \n  # remember when I defined xdimension and ydimension a while ago?\n  # It's coming in handy here!\n  ggplot(aes(x = xdimension, y = ydimension, fill = contact)) +\n\n  # We're making a tile map!\n  geom_tile() +\n  \n  # I am defining some display text here. I want\n  # to print the value of \"contact,\" which is the \n  # estimated percentage of Americans in a certain\n  # state who were contacted by a political campaign!\n  \n  # However, this number is a decimal. Another way\n  # of formatting percentages is by multiplying them by 100\n  # and using the round function (I wanted no decimal places).\n  # I then use the paste0 function to add a pretty percentage sign!\n  geom_text(aes(label = paste0(round(contact*100,0), \"%\")),\n            \n            # this makes the text white!\n            color = \"white\") +\n\n  # Using our grid from before. Thanks again to the Urban Institute!\n  # I also want to facet by state_abbv (That is, make a new tile) for\n  # each state abbreviation.\n  facet_geo(facets = ~state_abbv, grid = urban_grid) +\n  labs(title = \"Percentage of Americans Contacted by a Political Campaign in 2020\",\n       subtitle = \"Adapted from Code from the Urban Institute\",\n       caption = \"Graph by Pia Deshpande \\n Data from the 2020 CES\",\n       x = NULL,\n       y = NULL) +\n  scale_fill_gradient(\n    \n  # Purple all the way down!\n  low = \"plum\",\n  high = \"mediumpurple4\",\n  \n  # No legend title please\n  \"\"\n)+\n  theme(plot.background = element_rect(colour = \"white\"),\n        panel.grid = element_blank(),\n        panel.grid.major = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        axis.line = element_blank(),\n        panel.spacing = unit(0L, \"pt\"),\n        legend.position = \"none\",\n        strip.text.x = element_text(size = 9L))\n```\n\n```         \n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"tutorial3.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"source","title":"Making maps with the CES","code-block-bg":true,"code-block-border-left":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}